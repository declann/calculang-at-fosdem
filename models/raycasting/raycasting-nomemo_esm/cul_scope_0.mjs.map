{"version":3,"names":["range","tan_ray_angle","ray_angle_in","Math","tan","ray_angle","inverse_tan_ray_angle","ray_looking_up","sin","ray_looking_right","cos","map","map_lookup","y_in","x_in","y","x","floor","rhx","step_in","f_in","keys_stream_version_in","keys_stream_function_in","step","player_x","player_y","rhy","rhv","rh_hit_object","reduce","acc","v","rh_hit_x","rh_hit_y","rh_hit_v","rh_hit_step","rh_hit_distance","sqrt","rvx","rvy","rvv","rv_hit_object","rv_hit_x","rv_hit_y","rv_hit_v","rv_hit_step","rv_hit_distance","r_hit_h_or_v","r_hit_object","r_hit_x","r_hit_y","r_hit_v","r_hit_step","fisheye_correction","fisheye_correction_in","ray_distance","min","player_angle","ray_inverse_distance","keys_stream_function","keys_stream_version","keys","filter","d","frame","f","key_up","length","find","key","key_down","key_left","key_right","forwardness","leftness","speed","max"],"sources":["raycasting-nomemo.cul.js"],"sourcesContent":["import { range } from \"underscore\";\n\n// trig helpers:\n\nexport const tan_ray_angle = () => Math.tan(ray_angle());\nexport const inverse_tan_ray_angle = () => 1 / tan_ray_angle();\n\n// we use this to find the right grid lines:\n\nexport const ray_looking_up = () => Math.sin(ray_angle()) > 0;\nexport const ray_looking_right = () => Math.cos(ray_angle()) > 0;\n\n// the 2d map we are raycasting\n// non-zero is a wall\nexport const map = () => [\n  [1, 1, 1, 1, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 2, 0, 1, 0, 0, 1],\n  [1, 0, 0, 0, 1, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 2, 0, 0, 3, 1],\n  [1, 0, 0, 2, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1],\n];\n\n// for x and y looks up the corresponding map value\nexport const map_lookup = () => {\n  // non zero is a wall!\n  // boundaries:\n  if (y() <= 0.1 || x() >= 7.99 || x() <= 0.1 || y() >= 7.99) return 1;\n\n  // map lookups with necessary fudge:\n  return (\n    map()[Math.floor(y() - 0.01)][Math.floor(x() - 0.01)] ||\n    map()[Math.floor(y() - 0)][Math.floor(x() - 0)]\n  );\n};\n\n// to calculate ray distances:\n\n// this algorithm checks intersections of rays with horizonal and vertical gridlines\n// there are separate h=horizontal, v=vertical formulas\n// until we take the minimum distance of the 2\n\n// h=horizontal::\n\n// \"ray-horizontal-check x\": the x position of the current step along current ray\nexport const rhx = () => {\n  if (step() == 0)\n    return player_x() + (player_y() - rhy()) * inverse_tan_ray_angle();\n  else\n    return (\n      rhx({ step_in: step() - 1 }) +\n      (ray_looking_up() ? 1 : -1) * inverse_tan_ray_angle()\n    );\n};\n\nexport const rhy = () => {\n  if (ray_looking_up()) {\n    if (step() == 0) return Math.floor(player_y());\n    else return rhy({ step_in: step() - 1 }) - 1;\n  } else {\n    if (step() == 0) return Math.floor(player_y()) + 1;\n    else return rhy({ step_in: step() - 1 }) + 1;\n  }\n};\n\n// \"ray-horizontal-check value\": the corresponding value for map at step along current ray\nexport const rhv = () => map_lookup({ x_in: rhx(), y_in: rhy() });\n\n// the first wall hit; by reducing\n// summarises over steps and provides details\n// that we destructure afterwards\n// calculang compiler logic infers that step_in no longer matters\nexport const rh_hit_object = () => {\n  return range(0, 8.1).reduce(\n    (acc, step_in) => {\n      if (acc.step_in == -1 && rhv({ step_in }) != 0)\n        return {\n          x: rhx({ step_in }),\n          y: rhy({ step_in }),\n          v: rhv({ step_in }),\n          step_in,\n        };\n      else return acc;\n    },\n    { step_in: -1 }\n  );\n};\n\nexport const rh_hit_x = () => rh_hit_object().x;\nexport const rh_hit_y = () => rh_hit_object().y;\nexport const rh_hit_v = () => rh_hit_object().v;\nexport const rh_hit_step = () => rh_hit_object().step_in;\n\nexport const rh_hit_distance = () =>\n  // Pythagoras' theorem\n  Math.sqrt((rh_hit_x() - player_x()) ** 2 + (rh_hit_y() - player_y()) ** 2);\n\n// vertical::\n\nexport const rvx = () => {\n  if (ray_looking_right()) {\n    if (step() == 0) return Math.floor(player_x()) + 1;\n    else return rvx({ step_in: step() - 1 }) + 1;\n  } else {\n    if (step() == 0) return Math.floor(player_x());\n    else return rvx({ step_in: step() - 1 }) - 1;\n  }\n};\n\nexport const rvy = () => {\n  if (step() == 0) return player_y() + (player_x() - rvx()) * tan_ray_angle();\n  else\n    return (\n      rvy({ step_in: step() - 1 }) +\n      (ray_looking_right() ? -1 : 1) * tan_ray_angle()\n    );\n};\n\n// \"ray-vertical-check value\": the corresponding value for map at step along current ray\nexport const rvv = () => map_lookup({ x_in: rvx(), y_in: rvy() });\n\n// the first wall hit - vertical checks\nexport const rv_hit_object = () => {\n  return range(0, 8.1).reduce(\n    (acc, step_in) => {\n      if (acc.step_in == -1 && rvv({ step_in }) != 0)\n        return {\n          x: rvx({ step_in }),\n          y: rvy({ step_in }),\n          v: rvv({ step_in }),\n          step_in,\n        };\n      else return acc;\n    },\n    { step_in: -1 }\n  );\n};\n\n// destructure\nexport const rv_hit_x = () => rv_hit_object().x;\nexport const rv_hit_y = () => rv_hit_object().y;\nexport const rv_hit_v = () => rv_hit_object().v;\nexport const rv_hit_step = () => rv_hit_object().step_in;\n\nexport const rv_hit_distance = () =>\n  // Pythagoras' theorem\n  Math.sqrt((rv_hit_x() - player_x()) ** 2 + (rv_hit_y() - player_y()) ** 2);\n\n// now consolidating 2 h/v calcs above:\n\nexport const r_hit_h_or_v = () =>\n  // this contributes to color shading\n  rv_hit_distance() < rh_hit_distance() ? \"v\" : \"h\";\n\nexport const r_hit_object = () =>\n  r_hit_h_or_v() == \"v\" ? rv_hit_object() : rh_hit_object();\nexport const r_hit_x = () => r_hit_object().x;\nexport const r_hit_y = () => r_hit_object().y;\nexport const r_hit_v = () => r_hit_object().v;\nexport const r_hit_step = () => r_hit_object().step_in;\n\nexport const fisheye_correction = () => fisheye_correction_in;\n\nexport const ray_distance = () =>\n  Math.min(rv_hit_distance(), rh_hit_distance()) *\n  (fisheye_correction() ? Math.cos(player_angle() - ray_angle()) : 1);\n\nexport const ray_inverse_distance = () => 1 / ray_distance();\n\n/////// key controls\n\nexport const keys_stream_function = () => keys_stream_function_in;\nexport const keys_stream_version = () => keys_stream_version_in;\n\nexport const keys = () => {\n  keys_stream_version();\n  return keys_stream_function()().filter((d) => d.frame == f());\n  //\n};\n\nexport const key_up = () =>\n  keys().length\n    ? keys().find((d) => d.key == \"ArrowUp\")\n      ? true\n      : false\n    : false;\n\nexport const key_down = () =>\n  keys().length\n    ? keys().find((d) => d.key == \"ArrowDown\")\n      ? true\n      : false\n    : false;\n\nexport const key_left = () =>\n  keys().length\n    ? keys().find((d) => d.key == \"ArrowLeft\")\n      ? true\n      : false\n    : false;\n\nexport const key_right = () =>\n  keys().length\n    ? keys().find((d) => d.key == \"ArrowRight\")\n      ? true\n      : false\n    : false;\n\nexport const forwardness = () => (key_up() ? 1 : key_down() ? -1 : 0);\n\nexport const leftness = () => (key_left() ? 1 : key_right() ? -1 : 0);\n\nexport const player_angle = () => {\n  if (f() <= 0) return 1.21;\n  else return player_angle({ f_in: f() - 1 }) + leftness() * 0.15;\n};\n\nexport const player_x = () => {\n  if (f() <= 0) return 1.3;\n  else\n    return (\n      player_x({ f_in: f() - 1 }) +\n      forwardness() * speed() * Math.cos(player_angle())\n    );\n};\n\nexport const player_y = () => {\n  if (f() <= 0) return 6.5;\n  else\n    return (\n      player_y({ f_in: f() - 1 }) +\n      forwardness() * speed() * Math.sin(player_angle()) * -1 // origin top left\n    );\n};\n\nexport const speed = () => 0.5;\n\n// inputs:\nexport const f = () => f_in;\n\n// replaced these with controls, but they'll come back when I modularise:\n//export const player_x = () => player_x_in;\n//export const player_y = () => player_y_in;\n//export const player_angle = () => player_angle_in;\n\nexport const ray_angle = () => ray_angle_in;\n\nexport const step = () => Math.max(0, step_in);\n\n// for map lookups:\n\nexport const x = () => x_in;\nexport const y = () => y_in;\n"],"mappings":"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"}